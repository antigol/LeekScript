### Closures

// 1er cas basique : capture d'une variable du bloc a.

let a = 12
let f = x -> x + a // capture à la création de la fonction
f(5)  ===>  17

// 2ème cas, capture d'un paramètre a.

let g = a -> x -> x + a
let f = g(5) // capture au moment de la création de la fonction de retour
f(9)  ===>  14

// 3ème cas, capture un niveau au dessus : une fonction interne doit capturer une variable
donc la fonction parente doit la capturer aussi.

let a = 12
let f = function() [a] {
	
	let aux = [a] x -> {
		return a + x
	}
	aux(2)
}

// 4ème cas, capture d'une variable qui est détruite entre temps

let f = function() {

	let a = 12
	return x -> x + a // Capture de a
	
	// retour de (x -> x + a)
	// a est stockée (par exemple dans un paramètre)
}

let g = f() // retourne la fonction g, et stocke la capture a dans une variable à coté.

g(3, [a]) = 15 // la capture a est envoyée dans la fonction g à son appel.